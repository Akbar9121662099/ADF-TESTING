{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "akbarmm9369"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/http_copy_file_datalake_list')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_files",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "checkfile and move",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_files').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "copy the file from https to data lake_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_https_death_files",
											"type": "DatasetReference",
											"parameters": {
												"relativeurl": {
													"value": "@item().sourceRelativeURL",
													"type": "Expression"
												},
												"baseurl": {
													"value": "@item().sourceBaseURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "dath_file_datalake",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().sinkFileName",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"sourcebaseurl": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-23T15:32:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelinefromdatalaketo db cases death')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy cases death from ds db",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "processedcasesdeath",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "db_cases_deaath",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-24T14:19:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineincrementalloads')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookupoldwatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Lookupmaxdate",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select MAX(LastModifytime) as NewWatermarkvalue from data_source_table",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookupoldwatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Lookupmaxdate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from data_source_table where LastModifytime > \n'@{activity('LookupOldWaterMark').output.firstRow.WatermarkValue}' and \nLastModifytime <= '@{activity('Lookupmaxdate').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable3",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText4",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('Lookupmaxdate').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('LookupOldWaterMark').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "azuresqldb",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-27T09:20:34Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "processedcasesdeath",
								"type": "DatasetReference"
							},
							"name": "sourcedatalakeCasedeath"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "db_cases_deaath",
								"type": "DatasetReference"
							},
							"name": "sinksqldbcasedeath"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          population as string,",
						"          cases_count as string,",
						"          deaths_count as string,",
						"          reported_date as string,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcedatalakeCasedeath",
						"sourcedatalakeCasedeath sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          population as long,",
						"          cases_count as long,",
						"          deaths_count as long,",
						"          reported_date as date,",
						"          source as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinksqldbcasedeath"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_cases_Death')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Datalake_Cases_death",
								"type": "DatasetReference"
							},
							"name": "sourcecasesdeaths"
						},
						{
							"dataset": {
								"referenceName": "DS_Lookup_countrycodes",
								"type": "DatasetReference"
							},
							"name": "sourcelkp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_lake_cases_death_Sink",
								"type": "DatasetReference"
							},
							"name": "sinktarget"
						}
					],
					"transformations": [
						{
							"name": "filteruk"
						},
						{
							"name": "selectrequirecolumn"
						},
						{
							"name": "pivotconfirmedanddeaths"
						},
						{
							"name": "lookupforcountrycodes"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          country_code as string,",
						"          continent as string,",
						"          population as integer,",
						"          indicator as string,",
						"          daily_count as integer,",
						"          date as date,",
						"          rate_14_day as double,",
						"          source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcecasesdeaths",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcelkp",
						"sourcecasesdeaths filter(country_code=='GBR') ~> filteruk",
						"filteruk select(mapColumn(",
						"          country,",
						"          country_code,",
						"          population,",
						"          indicator,",
						"          daily_count,",
						"          Reported_date = date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectrequirecolumn",
						"selectrequirecolumn pivot(groupBy(country,",
						"          country_code,",
						"          Reported_date,",
						"          source),",
						"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
						"     Count = sum(daily_count),",
						"     columnNaming: '$N_$V',",
						"     lateral: true) ~> pivotconfirmedanddeaths",
						"pivotconfirmedanddeaths, sourcelkp lookup(pivotconfirmedanddeaths@country == sourcelkp@country,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(sourcelkp@country, true),",
						"     broadcast: 'auto')~> lookupforcountrycodes",
						"lookupforcountrycodes select(mapColumn(",
						"          country = pivotconfirmedanddeaths@country,",
						"          country_code,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          {Count_confirmed cases},",
						"          Count_deaths,",
						"          Reported_date,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['cases_death_processed.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinktarget"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_hosipital_admissions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_lake_hospital_admission",
								"type": "DatasetReference"
							},
							"name": "sourceaddmission"
						},
						{
							"dataset": {
								"referenceName": "DS_Lookup_countrycodes",
								"type": "DatasetReference"
							},
							"name": "sourcelkpcountrycode"
						},
						{
							"dataset": {
								"referenceName": "ds_lookup_dim_date",
								"type": "DatasetReference"
							},
							"name": "sourcelkpdatedim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_lake_cases_death_Sink",
								"type": "DatasetReference"
							},
							"name": "sinkdaily"
						},
						{
							"dataset": {
								"referenceName": "ds_lake_cases_death_Sink",
								"type": "DatasetReference"
							},
							"name": "sinkweekly"
						}
					],
					"transformations": [
						{
							"name": "selectsrcolumns"
						},
						{
							"name": "filterUk"
						},
						{
							"name": "pivotvalues"
						},
						{
							"name": "split1"
						},
						{
							"name": "pivot1"
						},
						{
							"name": "lookupcountrycode"
						},
						{
							"name": "lookupcontrycode"
						},
						{
							"name": "lookupdates"
						},
						{
							"name": "selectsinkdaily"
						},
						{
							"name": "selectsinkweekly"
						}
					],
					"scriptLines": [
						"source(output(",
						"          country as string,",
						"          indicator as string,",
						"          date as date,",
						"          year_week as string,",
						"          value as double,",
						"          source as string,",
						"          url as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 9000,",
						"     ignoreNoFilesFound: false) ~> sourceaddmission",
						"source(output(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          continent as string,",
						"          population as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcelkpcountrycode",
						"source(output(",
						"          date_key as date,",
						"          date as date,",
						"          year as short,",
						"          month as short,",
						"          day as short,",
						"          day_name as string,",
						"          day_of_year as short,",
						"          week_of_month as short,",
						"          week_of_year as short,",
						"          month_name as string,",
						"          year_month as integer,",
						"          year_week as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcelkpdatedim",
						"filterUk select(mapColumn(",
						"          country,",
						"          indicator,",
						"          date,",
						"          year_week,",
						"          value,",
						"          source",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectsrcolumns",
						"sourceaddmission filter(country=='United Kingdom') ~> filterUk",
						"split1@daily pivot(groupBy(country,",
						"          date,",
						"          source,",
						"          year_week),",
						"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
						"     admission = sum(value),",
						"     columnNaming: 'Count$N_$V',",
						"     lateral: true) ~> pivotvalues",
						"selectsrcolumns split(like(indicator, 'Daily%'),",
						"     disjoint: false) ~> split1@(daily, weekly)",
						"split1@weekly pivot(groupBy(country,",
						"          date,",
						"          year_week,",
						"          source),",
						"     pivotBy(indicator, ['Daily ICU occupancy', 'Daily hospital occupancy']),",
						"     admission = sum(value),",
						"     columnNaming: 'Count$N_$V',",
						"     lateral: true) ~> pivot1",
						"pivotvalues, sourcelkpcountrycode lookup(pivotvalues@country == sourcelkpcountrycode@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupcountrycode",
						"pivot1, sourcelkpcountrycode lookup(pivot1@country == sourcelkpcountrycode@country,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupcontrycode",
						"lookupcontrycode, sourcelkpdatedim lookup(substring(pivot1@year_week, 7, 2) == lpad(char(day_of_year),2,'0'),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupdates",
						"lookupcountrycode select(mapColumn(",
						"          country = pivotvalues@country,",
						"          date,",
						"          source,",
						"          year_week,",
						"          {Countadmission_Daily hospital occupancy},",
						"          {Countadmission_Daily ICU occupancy},",
						"          country = sourcelkpcountrycode@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          population",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectsinkdaily",
						"lookupdates select(mapColumn(",
						"          country = pivot1@country,",
						"          date = pivot1@date,",
						"          year_week = pivot1@year_week,",
						"          source,",
						"          {Countadmission_Daily ICU occupancy},",
						"          {Countadmission_Daily hospital occupancy},",
						"          country = sourcelkpcountrycode@country,",
						"          country_code_2_digit,",
						"          country_code_3_digit,",
						"          continent,",
						"          population,",
						"          date_key,",
						"          date = sourcelkpdatedim@date,",
						"          year,",
						"          day_name,",
						"          day_of_year,",
						"          week_of_month,",
						"          week_of_year,",
						"          month_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectsinkweekly",
						"selectsinkdaily sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['dailyaddmision.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkdaily",
						"selectsinkweekly sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['admission_weekly.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkweekly"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_testingdata')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "sourcetestingdata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTabletablename",
								"type": "DatasetReference"
							},
							"name": "sinksqldbtesting"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string,",
						"          Column_5 as string,",
						"          Column_6 as string,",
						"          Column_7 as string,",
						"          Column_8 as string,",
						"          Column_9 as string,",
						"          Column_10 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcetestingdata",
						"sourcetestingdata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          country as string,",
						"          country_code_2_digit as string,",
						"          country_code_3_digit as string,",
						"          year_week as string,",
						"          week_start_date as date,",
						"          week_end_date as date,",
						"          new_cases as long,",
						"          tests_done as long,",
						"          population as long,",
						"          testing_data_source as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          country = Column_1,",
						"          country_code_2_digit = Column_2,",
						"          country_code_3_digit = Column_3,",
						"          year_week = Column_4,",
						"          week_start_date = Column_5,",
						"          week_end_date = Column_6,",
						"          new_cases = Column_7,",
						"          tests_done = Column_8,",
						"          population = Column_9,",
						"          testing_data_source = Column_10",
						"     )) ~> sinksqldbtesting"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerquery1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "AzureSqlTable1",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AzureSqlTable1",
							"dataset": {
								"referenceName": "AzureSqlTabletablename",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared AzureSqlTable1 = let AdfDoc = Sql.Database(\"mmakbar9369.database.windows.net\", \"sqldbammakbar\", [CreateNavigationProperties = false]), InputTable = AdfDoc{[Schema=\"covid_reporting\",Item=\"testing\"]}[Data],\r\n  #\"Choose columns\" = Table.SelectColumns(InputTable, {\"country\", \"country_code_2_digit\"}),\r\n  #\"Removed blank rows\" = Table.SelectRows(#\"Choose columns\", each not List.IsEmpty(List.RemoveMatchingItems(Record.FieldValues(_), {\"\", null}))),\r\n  #\"Removed duplicates\" = Table.Distinct(#\"Removed blank rows\", {\"country_code_2_digit\"}),\r\n  #\"Sorted rows\" = Table.Sort(#\"Removed duplicates\", {{\"country_code_2_digit\", Order.Ascending}}),\r\n  #\"Uppercased text\" = Table.TransformColumns(#\"Sorted rows\", {{\"country_code_2_digit\", each Text.Upper(_), type nullable text}}) in #\"Uppercased text\";\r\nshared UserQuery = let Source = #\"AzureSqlTable1\" in Source;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyTesting')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_testingdata",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_testingdata",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcetestingdata": {},
									"sinksqldbtesting": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-24T14:32:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_testingdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/admission_hospital')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_hosipital_admissions",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_hosipital_admissions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceaddmission": {},
									"sourcelkpcountrycode": {},
									"sourcelkpdatedim": {},
									"sinkdaily": {},
									"sinkweekly": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-24T04:49:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_hosipital_admissions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cases_death_df')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_cases_Death",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cases_Death",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcecasesdeaths": {},
									"sourcelkp": {},
									"sinktarget": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-24T03:17:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_cases_Death')]"
			]
		}
	]
}